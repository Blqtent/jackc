/*
 * 			    Abstract Syntax Tree
 *
 *                      17 april MMXXI PUBLIC DOMAIN
 *           The author disclaims copyright to this source code.
 *
 *
 */

class Ast {
	field int tag;
	field String data;
	field Ast left;	
	field Ast right;	
	field Ast child;
	field Ast next;
	field Ast parent;	

	constructor Ast new (int tag_, String data_, Ast parent_) {
		let tag = tag_;
		let data = data_.copy();
		let parent = parent_;
		let child = null;
		let next = null;
		let left = null;
		let right = null;
		return this;
	}
	
	method void dispose() {
		var Ast c, d;

		do data.dispose();
		let c = child;
		while (c) {
			let d = c.getNext();	
			do c.dispose();
			let c = d;
		}
		if (left) {
			do left.dispose();
		}
		if (right) {
			do right.dispose();
		}
		do Memory.deAlloc(this);
		return;
	}

	method void ident(File f, int level) {
		while (level > 0) {
			let level = level - 1;
			do f.writeString("  ");
		}
		return;			
	}
	method void process(File f, int level) {
		var Ast c, d;
		var String s;
		var int i;
		let s = String.new(8);
		do ident(f, level);
		let s = s.setInt(tag);
		do f.writeString("tag=");
		do f.writeString(s);
		do s.dispose();
		do f.writeString(" data=");
		do f.writeString(data);
		do f.writeByte(10);
		let level = level + 1;
		if (left) {
			do ident(f, level);
			do f.writeString("left:");
			do f.writeByte(10);
			do left.process(f, level + 1);
		}
		if (right) {
			do ident(f, level);
			do f.writeString("right:");
			do f.writeByte(10);
			do right.process(f, level + 1);
		}
		let c = child;
		while (c) {
			do c.process(f, level);
			let d = c.getNext();	
			let c = d;
		}
		return;
	}


	method Ast add(int tag_, String data_) {
		var Ast a;
		let a = Ast.new(tag_, data_, this);
		do append(a);
		return a;
	}

	method Ast addop(String data_, Ast left_) {
		var Ast a;
		let a = Ast.new(C.OP(), data_, this);
	 	do a.setLeft(left_);	
		return a;
	}

	method Ast set(int tag_, String data_) {
		var Ast c, d;
		let c = child;
		while (c) {
			if ((c.getTag() = tag_) & (~data_.compare(c.getData())))
			{
				return c;
			}
			let c = c.getNext();	
		}
		return  add(tag_, data_);
	}


	method Ast append(Ast a) {
		var Ast c, d;
		let c = child;
		if (c = null) {
			let child = a;
		} else {
			while (c.getNext()) {
				let c = c.getNext();
			}
			do c.setNext(a);
		}
		return a;
	}

	method Ast pop() {
		var Ast c, d;
		let c = child;
		if (c = null) {
			return null;
		} else {
			let d = c;
			let child = c.getNext();
		}
		return d;
	}

	method void setLeft(Ast n) {
		let left = n;
		return;
	}

	method void setRight(Ast n) {
		let right = n;
		return;
	}


	method void setNext(Ast n) {
		let next = n;
		return;
	}

	method int getTag() {
		return tag;
	}


	method String getData() {
		return data;
	}

	method Ast getChild() {
		return child;
	}

	method Ast getRight() {
		return right;
	}
	method Ast getLeft() {
		return next;
	}
	method Ast getParent() {
		return parent;
	}
	method Ast getNext() {
		return next;
	}
}

