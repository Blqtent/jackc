
class Buffer {
	field Array buffer;
	field int size;
	field int pos;

	constructor Buffer new(int initial) {
		var int i;
		let buffer = Array.new(initial);
		let size = initial;
		let pos = 0;
		let i = 0;
		while (i < initial) {
			let buffer[i] = 0;
			let i = i + 1;
		}
	//	do Output.printInt(size);
		return this;
	}
	
	method void dispose() {
		do buffer.dispose();
		do Memory.deAlloc(this);
	}

	method int getAt(int p) {
		return buffer[p];
	}

	method Array setAt(int p, int data) {
		var Array r;
		do checkSize(p);
		let r = buffer[p];
		let buffer[p] = data;
		return r;
	}

	method int append(Array data) {
		var int i;
		let i = pos;
		do checkSize(pos);
		let buffer[pos] = data;
		let pos = pos + 1;
		return i;
	}

	method int insertSortedStr(String q) {
		var int i;
		let i = append(q); // FIXME qsort
		return i;
	}

	method int indexOfStr(String q) {
		var String s;
		var int i;
		let i = 0;
		while (i < pos) { // FIXME bsearch
			let s = buffer[i];
			if (s.compare(q) = 0) {
				return i;
			}
			let i = i + 1;
		}
		return -1;
	}


	method void disposeStr() {
		var String s;
		var int i;
		let i = 0;
		while (i < pos) {
			let s = buffer[i];
			if (s) {
				do s.dispose();
			}
			let i = i + 1;
		}
		do dispose();
		return;
	}

	method void checkSize(int idx) {
		var Array b;
		var int i;
		var int ns;
		if (idx > (size - 1)) {
			let ns = size + idx + 32;
			let b = Array.new(ns);
			let i = 0;
			while (i < pos) {
				let b[i] = buffer[i];
				let i = i + 1;
			}
			while (i < ns) {
				let b[i] = 0;
				let i = i + 1;
			}
			let size = ns;
			do buffer.dispose();
			let buffer = b;
		}
		return;
	}		

	method Array getArray() {
//		do Output.printString(" OOOO ");
//		do Output.printInt(buffer);
		return buffer;
	}

	method int getSize() {
		//do Output.printInt(size);
		return pos;
	}
}
