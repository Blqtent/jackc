
class CompilationEngine {
	field Xml x;
	field int KEYWORD;
	field int SYMBOL;
	field int IDENTIFIER;
	field int INT_CONST;
	field int STRING_CONST;
	field int CLASS;
	field int METHOD;
	field int FUNCTION;
	field int CONSTRUCTOR;
	field int INT;
	field int BOOLEAN;
	field int CHAR;
	field int VOID;
	field int VAR;
	field int STATIC;
	field int FIELD;
	field int LET;
	field int DO;
	field int IF;
	field int ELSE;
	field int WHILE;
	field int RETURN;
	field int TRUE;
	field int FALSE;
	field int NULL;
	field int THIS;
	field int ASM;
	field int LEFT_CURLY_BRACKET;
	field int RIGHT_CURLY_BRACKET;
	field int LEFT_PARENTHESIS;
	field int RIGHT_PARENTHESIS;
	field int LEFT_SQUARE_BRACKET;
	field int RIGHT_SQUARE_BRACKET;
	field int DOT;
	field int COMMA;
	field int SEMICOLON;
	field int PLUS;
	field int MINUS;
	field int MULTIPLY;
	field int DIV;
	field int AND;
	field int OR;
	field int GREATER;
	field int LESS;
	field int EQUAL;
	field int TILDE;
	field String token;
	field char c;
	field char ahead;
	field int token_type;
	field int key_word;
	field int int_val;
	field int line;
	field int last_line;
	field String new_file;
	field Xml dst;
	field JackTokenizer jt;

	constructor CompilationEngine new(JackTokenizer source) 
	{
		let src = null;
		let jt = source;
		let x = source.getXml();
		let dst = null;
		let token = String.new(256);
		let new_file = null;
		let c = 0;
		let line = 0;
		let last_line= -1;
		let ahead = 0;
		let token_type = -1;
		let key_word = 0;
		let int_val = 0;
		let KEYWORD = x.getString("keyword");
		let SYMBOL = x.getString("symbol");
		let INT_CONST = x.getString("integerConstant");
		let STRING_CONST = x.getString("stringConstant");
		let IDENTIFIER = x.getString("identifier");
		let CLASS = x.getString("class");
		let METHOD = x.getString("method");
		let FUNCTION = x.getString("function");
		let CONSTRUCTOR = x.getString("constructor");
		let INT = x.getString("int");
		let BOOLEAN = x.getString("boolean");
		let CHAR = x.getString("char");
		let VOID = x.getString("void");
		let VAR = x.getString("var");
		let STATIC = x.getString("static");
		let FIELD = x.getString("field");
		let LET = x.getString("let");
		let DO = x.getString("do");
		let IF = x.getString("if");
		let ELSE = x.getString("else");
		let WHILE = x.getString("while");
		let RETURN = x.getString("return");
		let TRUE = x.getString("true");
		let FALSE = x.getString("false");
		let NULL = x.getString("null");
		let THIS = x.getString("this");
		let ASM = x.getString("#asm");
		let LEFT_CURLY_BRACKET = String.ord("{");
		let RIGHT_CURLY_BRACKET = String.ord("}");
		let LEFT_PARENTHESIS = String.ord("(");
		let RIGHT_PARENTHESIS = String.ord(")");
		let LEFT_SQUARE_BRACKET = String.ord("[");
		let RIGHT_SQUARE_BRACKET = String.ord("]");
		let DOT = String.ord(".");
		let COMMA = String.ord(",");
		let SEMICOLON = String.ord(";");
		let PLUS = String.ord("+");
		let MINUS = String.ord("-");
		let MULTIPLY = String.ord("*");
		let DIV = String.ord("/");
		let AND = String.ord("&");
		let OR = String.ord("|");
		let GREATER = String.ord(">");
		let LESS = String.ord("<");
		let EQUAL = String.ord("=");
		let TILDE = String.ord("~");
		return this;
	}

	method void dispose() {
		do token.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method void init(File source) {
		let src = source;
		if (src) {
			let new_file = src.getName();
		}
		let c = 0;
		let ahead = 0;
		let token_type = -1;
		let key_word = 0;
		let int_val = 0;
		let line = 0;
		let last_line = -1;
	}

	method void compileClass(JackTokenizer tk, File dst_) {
		var int l;
		var String k;
		var boolean key_or_id;
		var boolean in_string;
		var boolean in_int;
		var boolean in_asm;
		let l = 0;
		let key_or_id = false;
		let in_string = false;
		let in_int = false;
		let in_asm = false;

		while (tk.hasMoreTokens()) {
			do tk.advance();
			//do Output.printString(tk.tokenType());
			//do Output.println();
		}
		return;

		do token.setCharAt(0, 0);
		if (c = 34) {
			let in_string = true;	
			do next();
		}			
		while ((c > 0) & (c < 1114112)) { // U+0001 to U+00110000
	
			if (in_string & (c = 34)) {
				let token_type = STRING_CONST;
				do x.addElement(token_type);
				do x.addContent(token);
				do addLine();
				do x.closeCurrent();
				do next();
				return;
			} else { if (in_int) { 
				if (((c > 47) & (c < 58))) {
					let token = token.appendChar(c);
					let l = l + 1;
				} else {
					let token_type = INT_CONST;
					do x.addElement(token_type);
					do x.addContent(token);
					do addLine();
					do x.closeCurrent();
					return;
				}
			} else { if (in_string) { 
				let token = token.appendChar(c);
				let l = l + 1;
			} else { if (in_asm) { 
				let token = token.appendChar(c);
				let l = l + 1;
				if (c = 10) {
					let token_type = ASM;
					do x.addElement(token_type);
					do x.addContent(token);
					do addLine();
					do x.closeCurrent();
					do next();
					return;
				}
			} else { if (((c > 64) & (c < 91)) |
				((c > 96) & (c < 123)) |
				(c = 95) |
				((c > 47) & (c < 58) & (l > 0)))
			{
				let key_or_id = true;
				let token = token.appendChar(c);
				let l = l + 1;

			} else { if (key_or_id) {
				let k = x.getStringNoCreate(token);
				if ((k = CLASS) |
					(k = METHOD) |
					(k = FUNCTION) |
					(k = CONSTRUCTOR) |
					(k = INT) |
					(k = BOOLEAN) |
					(k = CHAR) |
					(k = VOID) |
					(k = VAR) |
					(k = STATIC) |
					(k = FIELD) |
					(k = LET) |
					(k = DO) |
					(k = IF) |
					(k = ELSE) |
					(k = WHILE) |
					(k = RETURN) |
					(k = TRUE) |
					(k = FALSE) |
					(k = NULL) |
					(k = THIS))
				{
					let token_type = KEYWORD;
					let key_word = k;
				} else {
					let token_type = IDENTIFIER;

				}

				do x.addElement(token_type);
				do x.addContent(token);
				do addLine();
				do x.closeCurrent();
				return;
			} else { if (((c > 47) & (c < 58))) {
				let token = token.appendChar(c);
				let l = l + 1;
				let in_int = true;
			} else { if ((c = LEFT_CURLY_BRACKET) |
				(c = RIGHT_CURLY_BRACKET) |
				(c = LEFT_PARENTHESIS) |
				(c = RIGHT_PARENTHESIS) |
				(c = LEFT_SQUARE_BRACKET) |
				(c = RIGHT_SQUARE_BRACKET) |
				(c = DOT) |
				(c = COMMA) |
				(c = SEMICOLON) |
				(c = PLUS) |
				(c = MINUS) |
				(c = MULTIPLY) |
				(c = DIV) |
				(c = AND) |
				(c = OR) |
				(c = GREATER) |
				(c = LESS) |
				(c = EQUAL) |
				(c = TILDE)) 

			{
				let token_type = SYMBOL;
				let symbol = c;	
				let token = token.appendChar(c);
				do x.addElement(token_type);
				do x.addContent(token);
				do addLine();
				do x.closeCurrent();
				do next();
				return;
			} else {  if ((c = 9) | (c = 10) |
					 (c = 13) | (c = 32)) 
			{
				let line = line;
			} else { if (c = 35) {
				let token = token.appendChar(c);
				let in_asm = true;
			} else {
				let token = token.appendChar(c);
				do error(line, token);
				do next();
				return;
			}}}}}}}}}}
				  	
			if (c = 10) {
				let line = line + 1;
			}
			do next();				
		}	
		return;
	}

	method int error(int line_, String w) {
		do Output.printString("Syntax error, in ");
		do Output.printString(src.getName());
		do Output.printString(" unespected '");
		do Output.printString(w);
		do Output.printString("' at line ");
		do Output.printInt(line_ + 1);
		do Output.println();
		let c = 0;
		return 0;
	}
}

