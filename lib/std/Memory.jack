/*
 *                         jack standard library 
 *
 *                      2 april MMXXI PUBLIC DOMAIN
 *           The author disclaims copyright to this source code.
 *
 *
 */

class Memory {
	static int arena, asize;
	static int freep;
	static Array mem;

	function void init() {
		let mem = 0;
		let arena = Math.abs(mem[0]);

		let asize = 2048; //33554432; // 2 power 25
		let arena[0] = asize;
		let freep = arena;
		return;
	}

	function int peek(int addr) {
		return mem[addr];
	}

	function void poke(int addr, int value) {
		let mem[addr] = value;
		return;
	}

	function void defrag() {
		var Array p, q, end;
		let end = arena + asize;
		let p = arena;
		while (p < end) {
			if (p[0] > 0) {
				let q = p + p[0];
				while ((q < end) & (q[0] > 0)) {
					let p[0] = q - p;
					let q = q + q[0];	
				}
			} else { if (p[0] = 0) {
				return;
			}}
			let p = p + Math.abs(p[0]);
		} 
	}

	function Array alloc(int size) {
		var Array p, end;
		var int k, n, tries, i,j;
		var boolean doit;
		let tries = 0;
		let i = 0;
		let j = 0;
#py 	global __memory	
		while (tries < 3) {
			let end = arena + asize;
			let p = freep;
			let doit = true;
			while (doit | (~(p = freep))) {
				let doit = false;
				if (p[0] > size) {
					if ((size + 1) = p[0]) {
						let p[0] =-p[0];
					} else {
						let k = p[0];
						let p[0] = -(size+1);
						let p[size+1] = (k - size) - 1;
					}
					let freep = p;
					return p + 1;
				}		
				let p = p + Math.abs(p[0]);
				if (p = end) {
					let p = arena;
				}
				if ((p < arena) | (p > (end-1)) | (p[0] = 0)) {
					do Output.printString(
						"Error in alloc!");
					do Sys.error(23);
				}		
			}
			if (tries = 0) {
				do Memory.defrag();
			} else {
				let k = asize;
				let asize = asize + (size * 8) + 64;
#py 			__m = array.array('l', (Memory__arena + Memory__asize)*[0])
				let i = 0;
				let j = arena + k;
				while (i < j) {
#py 				__m[i] = __memory[i]
					let i = i + 1;		
				}
#py 			__memory = __m
				let end[0] = asize - k;
				let arena[asize - 1] = 0;
			}
			let tries = tries + 1;
		}
		return 0;
	}

	function void deAlloc(Array p) {
		var Array pi;
		if (p < arena) {
			return;
		}
		let pi = p;
		if ((pi < arena) | ((arena + asize) < pi) 
			| (mem[pi-1] > (-1))) 
		{
			do Output.printInt(arena);
			do Output.printString("Error in deAlloc!");
			do Output.printInt(pi);
			do Sys.error(22);
		}
		let pi = pi - 1;
		let pi[0] = -(pi[0]); 
		return;
	}
}
