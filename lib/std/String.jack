/*
 *                         jack standard library 
 *
 *                      1 april MMXXI PUBLIC DOMAIN
 *           The author disclaims copyright to this source code.
 *
 *
 */

class String {
	function String new(int maxLength) {
		var Array str;
		let str = Array.new(maxLength + 1);
		let str[0] = 0;
		return str;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	method int length() {
		var int l;
		let l = 0;
		while (this[l]) {
			let l = l + 1;
		}
		return l;
	}

	method char charAt(int a) {
		var char ret;
		let ret = this[a];
		return ret;
	}

	method void setCharAt(int j, char c) {
		let this[j] = c;
		return;
	}
	
	method String appendChar(char c) {
		var int l, i;
		var int max;
		var String b;
		let max = Math.abs(this[-1])-1;
		let l = length();
		/*if (l < (max - 1)) {
			let this[l] = c;
			let this[l + 1] = 0;
			return this;
		}*/
		let b = String.new((l * 2) + 4);
		let i = 0;
		while (i < l) {
			let b[i] = this[i];
			let i = i + 1;
		}
		let b[l] = c;
		let b[l + 1] = 0;
		do this.dispose();
		return b;
	}

	method void eraseLastChar() {
		var int l;
		let l = length();
		if (l > 0) {
			let this[l-1] = 0;
		}
		return;
	}
	
	method int intValue() {
		var int v, s;
		let v = 0;
		let s = 1;
		let d = this[0];
		let i = 1;
		if (d = 45) {
			let s = -1;
			let d = this[i];
			let i = i + 1;
		}
		while ((d > 47) & (d < 58)) {
			let v = v * 10;
			let v = v + d - 48;
			let d = this[i];
			let i = i + 1;
		} 
		return v * s;
	}
	
	method void setInt(int j) {
		var int n, r;
		let this[0] = 0;
		let n = 1000000000;
		while (n > 0) {
			do appendChar((j / n) + 48);
			let j = Math2.rem(j, n);
			let n = n / 10;
		}
		return;
	}

	function char backSpace() {
		return 8;
	}

	function char doubleQuote() {
		return 34;
	}

	function char newLine() {
		return 10;
	}
}
